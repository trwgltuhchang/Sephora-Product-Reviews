# -*- coding: utf-8 -*-
"""Sephora Filter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kDgVmsQz9fHk0F2rjtVNZFsiOjg0VhBG

# Analyze
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df1 = pd.read_excel("correlationbetweenVariables.xlsx")
df1.head()

num_missing = df1.isna().sum()
num_missing

df1[['is_recommended', 'helpfulness']] = df1[['is_recommended', 'helpfulness']].fillna(
    df1[['is_recommended', 'helpfulness']].mean()
)

import numpy as np

for col in ['skin_tone', 'eye_color', 'skin_type']:
    # Get value proportions (dropna ensures you only get observed values)
    probs = df1[col].value_counts(normalize=True, dropna=True)

    # How many values are missing?
    n_missing = df1[col].isna().sum()

    # Randomly sample values based on the observed distribution
    fill_values = np.random.choice(probs.index, size=n_missing, p=probs.values)

    # Fill in the missing values
    df1.loc[df1[col].isna(), col] = fill_values

df1.isnull().sum()

df1.describe()

search_term = input("Enter product ID or part of product name: ").lower()

def find_best_skin_type_per_product(df, product_query):
    product_query = str(product_query).strip()

    # Match by product ID or name
    if product_query.isdigit():
        matched_df = df[df['product_id'].astype(str) == product_query]
    else:
        matched_df = df[df['product_name'].str.lower().str.contains(product_query.lower())]

    if matched_df.empty:
        return f"No products found matching: {product_query}"

    result = []

    for product_id, group in matched_df.groupby('product_id'):
        product_name = group['product_name'].iloc[0]

        skin_stats = group.groupby('skin_type').agg(
            avg_rating=('rating', 'mean'),
            recommend_rate=('is_recommended', 'mean'),
            review_count=('rating', 'count')
        ).reset_index()

        skin_stats['score'] = 0.5 * skin_stats['avg_rating'] + 0.5 * skin_stats['recommend_rate'] * 5
        skin_stats = skin_stats[skin_stats['review_count'] >= 5]

        if skin_stats.empty:
            continue

        best_skin_type = skin_stats.sort_values('score', ascending=False).iloc[0]

        result.append({
            'product_id': product_id,
            'product_name': product_name,
            'best_skin_type': best_skin_type['skin_type'],
            'score': round(best_skin_type['score'], 2),
            'avg_rating': round(best_skin_type['avg_rating'], 2),
            'recommend_rate': round(best_skin_type['recommend_rate'], 2),
            'review_count': int(best_skin_type['review_count'])
        })

    if not result:
        return "No skin types had enough data to recommend."

    return pd.DataFrame(result).sort_values(by='score', ascending=False)

find_best_skin_type_per_product(df1, search_term)